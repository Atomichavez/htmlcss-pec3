/* usamos variables para declarar los colores una sola vez */
:root {
  --blue: rgb(93, 95, 121);
  --red: rgb(240, 93, 80);
  --orange: rgb(245, 157, 35);
}

/* la fonts que se utilizara en el documento se importa de google fonts */
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;700;800&display=swap');

/* las propiedades de css se agruparan en tres categorias: fonts, colors y layout. despues tendremos dos componentes que se repiten en todas las paginas que son header y footer. los media queries se declararan dentro de cada categoria */
@layer fonts, colors, layout, header, footer;

@layer fonts {
  header a {
    font-weight: 800;
    font-size: 1.2rem;
    text-decoration: none;
  }
  body {
    font-family: 'inter', sans-serif;
  }
  .header a {
    text-decoration: none;
  }
  .logo-header-text {
    font-weight: 700;
  }
  footer > p:nth-of-type(1) {
    font-size: 1.2rem;
  }
  .footnotes {
    font-size: 0.7rem;
  }
  input[type='submit'] {
    font-family: inherit;
    font-size: 1.1rem;
  }
  input[type='email'] {
    font-family: inherit;
    font-size: 1.2rem;
  }
  footer a {
    text-decoration: none;
    font-style: normal;
  }
  h1 {
    font-size: 2rem;
    font-weight: 800;
  }
  p.hero {
    font-size: 1.3rem;
    line-height: 2rem;
  }
  .gallery-preview p:nth-of-type(2) {
    font-size: 1.2rem;
    font-weight: 700;
  }
  .gallery-preview a::after {
    content: '\2192';
    padding-left: 1rem;
  }
  .gallery-nav {
    list-style: none;
  }
  /* ·• */
  .gallery-nav li::after {
    content: "•";
    margin: 0 .3rem;
    color:rgb(245, 157, 35);
  }
  .gallery-nav li:last-child::after {
    content: " "
  }
  .gallery-nav a {
    font-size: 0.8rem;
    font-weight: 800;
    text-decoration: none;
  }
  .gallery-item h2 {
    font-size: 3rem;
    font-weight: 800;
  }
  .gallery-item div:nth-of-type(1) p:nth-of-type(1), .gallery-item div:nth-of-type(1) p:nth-of-type(3) {
    font-size: .8rem;
    font-weight: 800;
  }
  .gallery-item p:nth-of-type(2) {
    font-size: 1.2rem;
    font-weight: 700;
  }
  .gallery-item p:nth-of-type(4) {
    font-size: 1.2rem;
    font-weight: 400;
  }
  .gallery-item a {
    text-decoration: none;
  }
  .gallery-item a::before {
    content: "+";
    margin-right: .2rem;
    color: var(--orange);
  }
  @media screen and (min-width: 1000px) {
    h1 {
      font-size: 3rem;
    }
  }
}

@layer colors {
  header a {
    color: var(--blue);
  }
  header a:hover {
    color: var(--orange);
  }
  footer a:hover {
    color: var(--orange);
  }
  input[type='submit'] {
    color: inherit;
    background-color: var(--red);
  }
  input[type='email'] {
    background-color: inherit;
    color: inherit;
  }
  footer a {
    color: inherit;
  }
  footer {
    background-color: black;
    color: white;
  }
  .hero div:nth-of-type(1) {
    background-color: var(--red);
  }
  .hero div:nth-of-type(2) {
    background-color: var(--orange);
  }
  .gallery-preview p {
    color: var(--blue);
  }
  .link {
    color: var(--orange);
  }
  .gallery-item h2 {
    color:rgb(240, 93, 80);
  }
  .gallery-item a {
    color: var(--orange)
  }
  .gallery-item p {
    color: var(--blue);
  }
  .gallery-nav a {
    color: var(--orange);
  }
}

@layer layout {
  /* reset */
  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }
  /* se establece un ancho maximo del contenido de 650px (que despues se modificara con los media queries) y ponemos margin auto para que el contenido este centrado y con un padding para que en caso de que la pantalla sea menor que 650px el contenido tenga espacio a los lados */
  main {
    margin: auto;
    padding: 1rem;
/*     max-width: 650px; */
  }
  /* para centrar el contenido del hero, seran dos flex childs (el cuadro rojo y el amarillo) y se hacen flex para podemo cambiar la direccion del flex-direction segun el media query, se da align y justify center para que el contenido este centrado en los boxes */
  .hero div {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 1rem;
    justify-content: center;
  }
  /* el contenedor hero se establece como block para que no aparezca nada a los lados y se establece el margen superior e inferior para separarlo del header y del section.gallery-preview, el margin lateral de auto es para que el contenido este centrado en el viewport */
  .hero {
    margin: 3rem auto 3rem auto;
    display:block;
  }
  /* para agregar un margen al texto de "mujeres en la ciencia" en la parte inferior */
  .hero div:nth-of-type(2) :nth-child(1) {
    margin-bottom: 20px;
  }
  /* para separar el logo un poco de los border de su contenedor */
  .hero div:nth-of-type(1) {
    padding: 1.5rem;
  }
  /* este div contiene la galleria de imagenes (.gallery-thumbnail), se establece como flex parent y tenemos un flex-direction: column que se modificara a row en los media queries conforme crezca el viewport, se le da un margin-top para separarlo del <a>, para centrar los textos de las imagenes de la galeria y se le agrega un margen vertical para separar los textos entre si y de la imagen */
  .gallery-preview div {
    display: flex;
    flex-direction: column;
    align-items: center;
    margin-top: 0.8rem;
    text-align: center;
  }
  .gallery-preview div p:nth-of-type(1) {
    margin-top: 1rem;
  }
  .gallery-preview div p:nth-of-type(2) {
    margin-top: .6rem;
  }
  /* se le agrega un margen inferior a cada elemento .gallery-thumbnail (que incluye foto y texto) para separar mas claramente los rows del gallery-preview. se da un width:100% para que ignore el tamaño de la imagen y se acople al tamaño del container */
  .gallery-thumbnail {
    margin-bottom: 2rem;
    width: 100%;
  }
  /* alinear los textos al centro de la columna */
  .gallery-preview {
    text-align: center;
  }
  /* se da un width:100% para que ignore el tamaño de la imagen y se acople al tamaño del container */
  .gallery-preview img {
    width: 100%;
  }
  .gallery-nav {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 0.5rem 0;
  }
  .gallery-nav-container {
    text-align: center;
  }
  .gallery-nav-container h1 {
    margin-bottom: 1.5rem;
  }
  .gallery {
    margin-top: 2rem;
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }
  .gallery-item {
    display: flex;
    flex-direction: column;
    gap: .3rem;
  }
  .gallery {
    margin-bottom: 3rem;
  }
  /* primer media query lo hacemos de 500px para cambiar de mobile a pantalla intermedia*/
  @media screen and (min-width: 500px){
    /* la galeria se convierte en flex row, con wrap para que los elementos se pasen a rows inferiores en caso de no caber en un mismo row, se establece el gap de 1rem para que las imagenes no esten pegadas horizontalmente, con justify-content: space-between hacemos que las imagenes esten alineadas a los extremos con el contenedor y con align-items: flex-start hacemos que se alinien las .gallery-thumbnail en la parte superior ya que si las alineamos de otra manera cuando los textos hacen wrap las imagenes se descuadran */
    .gallery-preview > div {
      flex-direction: row;
      flex-wrap: wrap;
      gap: 1rem;
      justify-content: space-between;
      align-items: flex-start;
    }
    /* los flex childs shrink y grow en la misma proporcion y deberan medir la mitad del row (50%) pero restandole 1rem que es lo que establecimos de gap, si no se resta esta distancia el width total excedera del 100% permitido y se pasara la segunda imagen hacia el row de abajo visualmente terminando con una columna de imagenes que es lo que no queremos */
    .gallery-thumbnail {
      flex: 1 1 calc(50% - 1rem);
    }
    /* alinear el texto a la izquierda */
    .gallery-preview p {
      text-align: left;
    }
    /* se establece un width maximo del contenedor main de 700px ya que en el mockup se aprecia que tiene whitespace a los lados el contenido, estoy asumiendo que es para que no se empiecen a deformar las fotos ya muy grandes, entonces entre los 700px y el proximo media query el contenido no cambiara de tamaño */
    main {
      max-width: 700px;
    }
    .gallery-item img {
      width: 100%;
      object-fit: cover;
    }
    .gallery-item {
      flex-direction: row;
      align-items: stretch;
      min-height: 130px;
      gap: 1rem;
    }
    .gallery-item > * {
      flex: 1 1 calc(25%);
      border: 1px solid magenta;
    }
    .gallery-item div:nth-of-type(2) {
      flex: 1 1 calc(50%);
      align-self: center;
    }
  }
  /* segundo media query para viewports grandes y de ahi en adelante ya todo se comportara asi */
  @media screen and (min-width: 1000px) {
    /* se establece un width maximo de 1300px ya que en el mockup se aprecia que el contenido tiene whitespace a los lados */
    main {
      max-width: 1300px;
    }
    /* el contenedor de los divs del hero se cambia a flex, para poder desplegar ambos divs uno al lado de otro */
    section.hero {
      display: flex;
    }
    /* el primer div que sera el que contiene el logotipo sera de 1/3 del tama;o total del contenedor, con grow 1 y shrink 1 nos encargamos de que sus dimensiones cambien en la misma proporcion que el otro div */
    .hero div:nth-of-type(1) {
      flex: 1 1 calc(1/3 * 100%);
    }
    /* el segundo div sera de 2/3 del tamaño del contenedor, igualmente grow y shrink con valor de 1, tambien se modifica el valor de padding para que el texto no se vea muy pegado al perimetro del contenedor */
    .hero div:nth-of-type(2) {
      flex: 1 1 calc(2/3 * 100%);
      padding: 3rem;
    }
    /* los .gallery-thumbnail de la galeria seran de 25% del width del container para que forzosamente acomode 4 por fila, al width de cada .gallery-thumbnail se le debera restar 1rem para que a la hora de que se generen los gaps en el flex no se pase el ultimo elemento a la fila que sigue */
    .gallery-thumbnail {
      flex: 1 1 calc(25% - 1rem);
    }
    /* se alinea el titulo al lado izquierdo del contenedor */
    section.hero h1 {
      text-align: left;
    }
  }
}

@layer header {
  header {
    margin-top: 1rem;
  }
  .logo-header-icon, .logo-header-text {
    display: inline-block;
  }
  .logo-header-container {
    display: flex;
    justify-content: center;
    align-items: flex-end;
  }
  nav {
    margin: 20px auto;
  }
  header li {
    list-style: none;
  }
  header a {
    display: block;
    text-align: center;
  }
  @media screen and (min-width: 1000px) {
    header {
      display: flex;
      justify-content: space-between;
      align-items: flex-end;
      max-width: 1300px;
      margin: auto;
      padding: 1rem;
    }
    header nav {
      margin: 0;
    }
    header ul {
      display: flex;
      justify-content: space-between;
      gap: 1.5rem;
    }
    header a {
      display: inline-block;
    }
  }
}

@layer footer {
  footer {
    text-align: center;
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
    padding: 40px 20px;
  }
  footer * {
    margin: 8px auto 8px auto;
  }
  #logo-footer-icon {
    display: block;
  }
  footer cite {
    display: block;
  }
  .politicas a {
    display: block;
  }
  footer form *{
    border: none;
  }
  label[for='email'] {
    display: none;
  }
  input[type='email'] {
    text-align: center;
    border: none;
    border-bottom: 1px solid white;
    width: 100%;
    padding-bottom: 1rem;
  }
  input[type='email']:focus {
    outline: 0;
  }
  input[type='submit'] {
    margin: 20px auto 40px auto;
    padding: 10px;
  }
  footer > p:nth-of-type(1) {
    margin: 40px 0;
  }
  .footnotes {
    margin: 20px auto 20px auto;
  }
}